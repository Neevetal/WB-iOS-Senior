//
// SaveMultipleReviewsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SaveMultipleReviewsRequest: Codable, JSONEncodable, Hashable {

    /** If the review was approved (`true`) or not (`false`). */
    public var approved: Bool
    /** Review ID. */
    public var id: String?
    /** Product ID. */
    public var productId: String
    /** Customer rating. */
    public var rating: Double
    /** Reviewer name. */
    public var reviewerName: String
    /** Review's text. */
    public var text: String
    /** Review's title. */
    public var title: String
    /** If the reviewer is a verified purchaser (`true`) or not (`false`). */
    public var verifiedPurchaser: Bool

    public init(approved: Bool, id: String? = nil, productId: String, rating: Double, reviewerName: String, text: String, title: String, verifiedPurchaser: Bool) {
        self.approved = approved
        self.id = id
        self.productId = productId
        self.rating = rating
        self.reviewerName = reviewerName
        self.text = text
        self.title = title
        self.verifiedPurchaser = verifiedPurchaser
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case approved
        case id
        case productId
        case rating
        case reviewerName
        case text
        case title
        case verifiedPurchaser
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(approved, forKey: .approved)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(productId, forKey: .productId)
        try container.encode(rating, forKey: .rating)
        try container.encode(reviewerName, forKey: .reviewerName)
        try container.encode(text, forKey: .text)
        try container.encode(title, forKey: .title)
        try container.encode(verifiedPurchaser, forKey: .verifiedPurchaser)
    }
}

