//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     * enum for parameter sort
     */
    public enum Sort_getProducts: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     Retrieve all products
     
     - parameter limit: (query) The maximum number of products to return. (optional)
     - parameter sort: (query) The sorting order for the returned products (asc or desc). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProducts(limit: Int? = nil, sort: Sort_getProducts? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Product]?, _ error: Error?) -> Void)) -> RequestTask {
        return getProductsWithRequestBuilder(limit: limit, sort: sort).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all products
     - GET /products
     - Returns a list of all products available in the fake online store.
     - parameter limit: (query) The maximum number of products to return. (optional)
     - parameter sort: (query) The sorting order for the returned products (asc or desc). (optional)
     - returns: RequestBuilder<[Product]> 
     */
    open class func getProductsWithRequestBuilder(limit: Int? = nil, sort: Sort_getProducts? = nil) -> RequestBuilder<[Product]> {
        let localVariablePath = "/products"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Product]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getUsers: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     Retrieve all users
     
     - parameter limit: (query) The maximum number of products to return. (optional)
     - parameter sort: (query) The sorting order for the returned products (asc or desc). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUsers(limit: Int? = nil, sort: Sort_getUsers? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [User]?, _ error: Error?) -> Void)) -> RequestTask {
        return getUsersWithRequestBuilder(limit: limit, sort: sort).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all users
     - GET /users
     - Returns a list of all products available in the fake online store.
     - parameter limit: (query) The maximum number of products to return. (optional)
     - parameter sort: (query) The sorting order for the returned products (asc or desc). (optional)
     - returns: RequestBuilder<[User]> 
     */
    open class func getUsersWithRequestBuilder(limit: Int? = nil, sort: Sort_getUsers? = nil) -> RequestBuilder<[User]> {
        let localVariablePath = "/users"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[User]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
