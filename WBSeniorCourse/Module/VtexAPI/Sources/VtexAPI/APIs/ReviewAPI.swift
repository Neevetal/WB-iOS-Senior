//
// ReviewAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ReviewAPI {

    /**
     Delete Multiple Reviews
     
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - parameter requestBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteMultipleReviews(contentType: String, accept: String, requestBody: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteMultipleReviewsWithRequestBuilder(contentType: contentType, accept: accept, requestBody: requestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Multiple Reviews
     - DELETE /reviews
     - Deletes multiple reviews at once.
     - API Key:
       - type: apiKey X-VTEX-API-AppToken (HEADER)
       - name: appToken
     - API Key:
       - type: apiKey X-VTEX-API-AppKey (HEADER)
       - name: appKey
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - parameter requestBody: (body)  (optional)
     - returns: RequestBuilder<Bool> 
     */
    open class func deleteMultipleReviewsWithRequestBuilder(contentType: String, accept: String, requestBody: [String]? = nil) -> RequestBuilder<Bool> {
        let localVariablePath = "/reviews"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Content-Type": contentType.encodeToJSON(),
            "Accept": accept.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Review
     
     - parameter reviewId: (path) Review ID. 
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteReview(reviewId: String, contentType: String, accept: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteReviewWithRequestBuilder(reviewId: reviewId, contentType: contentType, accept: accept).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Review
     - DELETE /review/{reviewId}
     - Deletes an existing review.
     - API Key:
       - type: apiKey X-VTEX-API-AppToken (HEADER)
       - name: appToken
     - API Key:
       - type: apiKey X-VTEX-API-AppKey (HEADER)
       - name: appKey
     - parameter reviewId: (path) Review ID. 
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - returns: RequestBuilder<Bool> 
     */
    open class func deleteReviewWithRequestBuilder(reviewId: String, contentType: String, accept: String) -> RequestBuilder<Bool> {
        var localVariablePath = "/review/{reviewId}"
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{reviewId}", with: reviewIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "Accept": accept.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update a Review
     
     - parameter reviewId: (path) Review ID. 
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - parameter editReviewRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func editReview(reviewId: String, contentType: String, accept: String, editReviewRequest: EditReviewRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetReviewbyReviewId200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return editReviewWithRequestBuilder(reviewId: reviewId, contentType: contentType, accept: accept, editReviewRequest: editReviewRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a Review
     - PATCH /review/{reviewId}
     - Updates the information of a review.
     - API Key:
       - type: apiKey X-VTEX-API-AppToken (HEADER)
       - name: appToken
     - API Key:
       - type: apiKey X-VTEX-API-AppKey (HEADER)
       - name: appKey
     - parameter reviewId: (path) Review ID. 
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - parameter editReviewRequest: (body)  
     - returns: RequestBuilder<GetReviewbyReviewId200Response> 
     */
    open class func editReviewWithRequestBuilder(reviewId: String, contentType: String, accept: String, editReviewRequest: EditReviewRequest) -> RequestBuilder<GetReviewbyReviewId200Response> {
        var localVariablePath = "/review/{reviewId}"
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{reviewId}", with: reviewIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: editReviewRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Content-Type": contentType.encodeToJSON(),
            "Accept": accept.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetReviewbyReviewId200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Review by Review ID
     
     - parameter reviewId: (path) Review ID. 
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getReviewbyReviewId(reviewId: String, contentType: String, accept: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetReviewbyReviewId200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getReviewbyReviewIdWithRequestBuilder(reviewId: reviewId, contentType: contentType, accept: accept).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Review by Review ID
     - GET /review/{reviewId}
     - Retrieves information of a product review by its ID.
     - API Key:
       - type: apiKey X-VTEX-API-AppToken (HEADER)
       - name: appToken
     - API Key:
       - type: apiKey X-VTEX-API-AppKey (HEADER)
       - name: appKey
     - parameter reviewId: (path) Review ID. 
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - returns: RequestBuilder<GetReviewbyReviewId200Response> 
     */
    open class func getReviewbyReviewIdWithRequestBuilder(reviewId: String, contentType: String, accept: String) -> RequestBuilder<GetReviewbyReviewId200Response> {
        var localVariablePath = "/review/{reviewId}"
        let reviewIdPreEscape = "\(APIHelper.mapValueToPathItem(reviewId))"
        let reviewIdPostEscape = reviewIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{reviewId}", with: reviewIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "Accept": accept.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetReviewbyReviewId200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a list of Reviews
     
     - parameter searchTerm: (query) Returns Reviews that contain the search term in &#x60;productId&#x60;, &#x60;sku&#x60;, &#x60;shopperId&#x60;, or &#x60;reviewerName&#x60;. 
     - parameter from: (query) Zero base starting record number, &#x60;0&#x60; is the default value. 
     - parameter to: (query) Zero base ending record number, &#x60;3&#x60; is the default value. 
     - parameter orderBy: (query) Case-sensitive fieldName to order records (optionally add &#x60;:asc&#x60; or &#x60;:desc&#x60;). 
     - parameter status: (query) Status of the review, approved (&#x60;true&#x60;) or not (&#x60;false&#x60;). 
     - parameter productId: (query) Filter the reviews by product ID. 
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getalistofReviews(searchTerm: String, from: String, to: String, orderBy: String, status: Bool, productId: String, contentType: String, accept: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetalistofReviews200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getalistofReviewsWithRequestBuilder(searchTerm: searchTerm, from: from, to: to, orderBy: orderBy, status: status, productId: productId, contentType: contentType, accept: accept).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of Reviews
     - GET /reviews
     - Retrieves a list of reviews.
     - API Key:
       - type: apiKey X-VTEX-API-AppToken (HEADER)
       - name: appToken
     - API Key:
       - type: apiKey X-VTEX-API-AppKey (HEADER)
       - name: appKey
     - parameter searchTerm: (query) Returns Reviews that contain the search term in &#x60;productId&#x60;, &#x60;sku&#x60;, &#x60;shopperId&#x60;, or &#x60;reviewerName&#x60;. 
     - parameter from: (query) Zero base starting record number, &#x60;0&#x60; is the default value. 
     - parameter to: (query) Zero base ending record number, &#x60;3&#x60; is the default value. 
     - parameter orderBy: (query) Case-sensitive fieldName to order records (optionally add &#x60;:asc&#x60; or &#x60;:desc&#x60;). 
     - parameter status: (query) Status of the review, approved (&#x60;true&#x60;) or not (&#x60;false&#x60;). 
     - parameter productId: (query) Filter the reviews by product ID. 
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - returns: RequestBuilder<GetalistofReviews200Response> 
     */
    open class func getalistofReviewsWithRequestBuilder(searchTerm: String, from: String, to: String, orderBy: String, status: Bool, productId: String, contentType: String, accept: String) -> RequestBuilder<GetalistofReviews200Response> {
        let localVariablePath = "/reviews"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search_term": (wrappedValue: searchTerm.encodeToJSON(), isExplode: true),
            "from": (wrappedValue: from.encodeToJSON(), isExplode: true),
            "to": (wrappedValue: to.encodeToJSON(), isExplode: true),
            "order_by": (wrappedValue: orderBy.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status.encodeToJSON(), isExplode: true),
            "product_id": (wrappedValue: productId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "Accept": accept.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetalistofReviews200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Multiple Reviews
     
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - parameter saveMultipleReviewsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func saveMultipleReviews(contentType: String, accept: String, saveMultipleReviewsRequest: [SaveMultipleReviewsRequest], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) -> RequestTask {
        return saveMultipleReviewsWithRequestBuilder(contentType: contentType, accept: accept, saveMultipleReviewsRequest: saveMultipleReviewsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Multiple Reviews
     - POST /reviews
     - Creates multiple reviews.
     - API Key:
       - type: apiKey X-VTEX-API-AppToken (HEADER)
       - name: appToken
     - API Key:
       - type: apiKey X-VTEX-API-AppKey (HEADER)
       - name: appKey
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - parameter saveMultipleReviewsRequest: (body)  
     - returns: RequestBuilder<[String]> 
     */
    open class func saveMultipleReviewsWithRequestBuilder(contentType: String, accept: String, saveMultipleReviewsRequest: [SaveMultipleReviewsRequest]) -> RequestBuilder<[String]> {
        let localVariablePath = "/reviews"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: saveMultipleReviewsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Content-Type": contentType.encodeToJSON(),
            "Accept": accept.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a Review
     
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - parameter saveReviewRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func saveReview(contentType: String, accept: String, saveReviewRequest: SaveReviewRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SaveReview200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return saveReviewWithRequestBuilder(contentType: contentType, accept: accept, saveReviewRequest: saveReviewRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a Review
     - POST /review
     - Creates a single review
     - API Key:
       - type: apiKey X-VTEX-API-AppToken (HEADER)
       - name: appToken
     - API Key:
       - type: apiKey X-VTEX-API-AppKey (HEADER)
       - name: appKey
     - parameter contentType: (header) Describes the type of the content being sent. 
     - parameter accept: (header) HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. 
     - parameter saveReviewRequest: (body)  
     - returns: RequestBuilder<SaveReview200Response> 
     */
    open class func saveReviewWithRequestBuilder(contentType: String, accept: String, saveReviewRequest: SaveReviewRequest) -> RequestBuilder<SaveReview200Response> {
        let localVariablePath = "/review"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: saveReviewRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Content-Type": contentType.encodeToJSON(),
            "Accept": accept.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SaveReview200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
